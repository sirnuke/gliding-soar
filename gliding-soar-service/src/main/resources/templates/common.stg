/*
 * Generic AST->Text templates
 */

bindWrapper(element) ::= <<<\\>
<proc(name=funcBindToPublic(), args="args", public=true, body={<\\>
upvar binding binding
::<commonNamespace()>::<funcBindToInternal()> "<elementToTCL(element)>" $args
})>
>>

setWrapper(element) ::= <<<\\>
<proc(name=funcSetPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcSetInternal()> "<elementToTCL(element)>" $args
})>
>>

applyWrapper(element) ::= <<<\\>
<proc(name=funcApplyPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcApplyInternal()> "<elementToTCL(element)>" $args
})>
>>

addToWrapper(element) ::= <<<\\>
<proc(name=funcAddToPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcAddToInternal()> "<elementToTCL(element)>" $args
})>
>>

removeWrapper(element) ::= <<<\\>
<proc(name=funcRemovePublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcRemoveInternal()> "<elementToTCL(element)>" $args
})>
>>

constructWrapper(element) ::= <<<\\>
<proc(name=funcConstructSoloPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcConstructSoloInternal()> "<elementToTCL(element)>" $args
})>
>>

constructSetWrapper(element) ::= <<<\\>
<proc(name=funcConstructManyPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcConstructManyInternal()> "<elementToTCL(element)>" $args
})>
>>

initiateWrapper(element) ::= <<<\\>
<proc(name=funcInitiatePublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcInitiateInternal()> "<elementToTCL(element)>" $args
})>
>>

deployWrapper(element) ::= <<<\\>
<proc(name=funcDeployPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcDeployInternal()> "<elementToTCL(element)>" $args
})>
>>

declareIdentifier(element) ::= "variable identifier <elementToIdentifier(element)>"
declareType(element) ::= "variable type <elementToType(element)>"

namespace(name, block) ::= <<
namespace eval <name> {
    <block>
}
>>

elementToType(element) ::= "<element.identifier.fullyQualified; separator={.}>"
elementToIdentifier(element) ::= "<element.identifier.lowercase>"
elementToTCL(element) ::= "<element.identifier.fullyQualified; separator={::}>"

proc(name, args, body, public) ::= <<
<if(public)>namespace export <name><endif>
proc <name> { <args> } {
    <body>
}
>>

funcBindToPublic() ::= "bind"
funcBindToInternal() ::= "_bind"

funcSetPublic() ::= "set"
funcSetInternal() ::= "_set"

funcApplyPublic() ::= "apply"
funcApplyInternal() ::= "_apply"

funcAddToPublic() ::= "add"
funcAddToInternal() ::= "_add"

funcRemovePublic() ::= "remove"
funcRemoveInternal() ::= "_remove"

funcConstructSoloPublic() ::= "construct"
funcConstructSoloInternal() ::= "_construct"

funcConstructManyPublic() ::= "construct-set"
funcConstructManyInternal() ::= "_construct_set"

funcInitiatePublic() ::= "initiate"
funcInitiateInternal() ::= "_initiate"

funcDeployPublic() ::= "deploy"
funcDeployInternal() ::= "_deploy"

commonNamespace() ::= "Glide"

ngsDeclareType(element) ::= "::NGS_DeclareType <elementToType(element)> {}"

