/*
 * Generic AST->Text templates
 */

requiredParametersAsArguments(members) ::= <<
<members:{m|<if(m.param&&!m.optional)><\\>
<m.identifier.lowercase> <\\>
<endif><\\>
}>
>>

optionalParametersAsArguments(members) ::= <<
<members:{m|<if(m.param&&m.optional)><\\>
<optionalArguments(m.identifier.lowercase)> <\\>
<endif><\\>
}>
>>

funcSetScope() ::= "set-scope"
funcCheckRhs() ::= "_check-rhs"
funcCheckTypes() ::= "_check-types"
funcClaimBinding() ::= "_claim-binding"
funcOutputBinding() ::= "output-binding"
funcInputBinding() ::= "input-binding"
funcStateBinding() ::= "state-binding"
funcGoalBinding() ::= "goal-binding"
funcCheckIMod() ::= "_check-i-modification"
funcCheckOMod() ::= "_check-o-modification"
funcCreate() ::= "_create"
funcCreateByOperator() ::= "_create_by_operator"

checkRhsElaboration() ::= "<funcCheckRhs()> elaboration"
checkRhsProposal()    ::= "<funcCheckRhs()> proposal"

checkTypes(list) ::= <<
<funcCheckTypes()> <list; separator=" ">
>>
claimBinding(val, type) ::= "<funcClaimBinding()> <val> <type>"

callCreate(type, destination, attribute, binding, attrs) ::= "[::glide::<funcCreate()> <type> <destination> <attribute> <binding> <attrs>]"
callCreateByOperator(type, destination, attribute, binding, state, add_prefs, attrs) ::= "[::glide::<funcCreateByOperator()> <type> <destination> <attribute> <binding> <state> <add_prefs> <attrs>]"

checkIModification(destination, attribute, type) ::= "<funcCheckIMod()> <destination> <attribute> <type>"
checkOModification(destination, attribute, type) ::= "<funcCheckOMod()> <destination> <attribute> <type>"

inputBinding() ::= "[::glide::<funcInputBinding()>]"
outputBinding() ::= "[::glide::<funcOutputBinding()>]"
stateBinding() ::= "[::glide::<funcStateBinding()>]"
goalBinding() ::= "[::glide::<funcGoalBinding()>]"

setDefaultValue(varName, defaultValue) ::= <<
<ifElse({$<varName> eq ""},
{set <varName>_ <defaultValue>},
{set <varName>_ $<varName>}
)>
>>

createAttrsOfAllParameters(var, members) ::= <<
<set(var, list({<members:createAttrFromMember(); separator=" ">}))>
>>

createAttrFromMember(member) ::= <<
<if(member.param)><\\>
[list <member.identifier.value> <toSafeVar(member.identifier.value)> <member.type.value>]<\\>
<endif>
>>

/*
createAttrFromRequiredSingleParameter(param) ::= <<
<if(!param.optional&&!param.multiple)><\\>
<param.identifier.value> <toSafeVar(param.identifier.value)><\\>
<endif>
>>

createAttrFromOptionalSingleParameter(param, var) ::= <<
<if(param.optional&&!param.multiple)><\\>
<if_({<toSafeVar(param.identifier.value)> ne ""}, {dict lappend <var> <param.identifier.value> <toSafeVar(param.identifier.value)>})><\\>
<endif>
>>

createAttrFromMultipleParameter(param, var) ::= <<
<if(param.multiple)><\\>
<foreach("val", param.identifier.value, {dict lappend <var> <param.identifier.value> $val})>
<endif>
>>
*/

scopeVariable() ::= "::glide::_scope"

/*
 * Pure generic Soar templates
 */

binding(identifier) ::= "\<<identifier>>"

/*
 * NGS Wrappers
 */

// TODO: This assumes that we'll never want NGS to create any defaults for us (probably safe?)
ngsDeclareType(type) ::= "::NGS_DeclareType <type> {}"
ngsCreateAttribute(binding, attribute, val) ::= "[ngs-create-attribute <binding> <attribute> <val>]"
ngsCreateTypedObject(destination, attribute, type, binding, attrs) ::= "[ngs-create-typed-object <destination> <attribute> <type> <binding> <attrs>]"
ngsCreateTypedObjectByOperator(state, destination, attribute, type, binding, attrs, action, prefs) ::= "[ngs-create-typed-object-by-operator <state> <destination> <attribute> <type> <binding> <attrs> <action> <prefs>]"
ngsAddToSet() ::= "$::NGS_ADD_TO_SET"

ngsDefaultAddPrefs() ::= "="

/*
 * Pure generic TCL templates
 */

proc(name, args, body, public) ::= <<
<if(public)><export(name)><endif>
proc <name> { <args> } {
    <body>
}
>>

namespace(name, block) ::= <<
namespace eval <name> {
    <block>
}
>>

if_(condition, block) ::= <<
if { <condition> } {
    <block>
}
>>

ifElse(condition, trueBlock, falseBlock) ::= <<
if { <condition> } {
    <trueBlock>
} else {
    <falseBlock>
}
>>

foreach(var, list, block) ::= <<
foreach <var> <list> {
    <block>
}
>>

optionalArguments(names) ::= <<
<names:{n|{ <n> ""\}}; separator=" ">
>>

export(name) ::= "namespace export <name>"

toSafeVar(name) ::= "${<name>}"

return(statement) ::= "return <statement>"

set(var, value_) ::= "set <var> <value_>"

list(words) ::= <<
[list <words; separator=" ">]
>>
