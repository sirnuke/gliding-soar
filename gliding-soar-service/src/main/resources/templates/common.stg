/*
 * Generic AST->Text templates
 */

bindWrapper(element) ::= <<<\\>
<proc(name=funcBindToPublic(), args="args", public=true, body={<\\>
upvar binding binding
::<commonNamespace()>::<funcBindToInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

setWrapper(element) ::= <<<\\>
<proc(name=funcSetPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcSetInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

applyWrapper(element) ::= <<<\\>
<proc(name=funcApplyPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcApplyInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

addToWrapper(element) ::= <<<\\>
<proc(name=funcAddToPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcAddToInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

removeWrapper(element) ::= <<<\\>
<proc(name=funcRemovePublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcRemoveInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

constructWrapper(element) ::= <<<\\>
<proc(name=funcConstructSoloPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcConstructSoloInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

constructSetWrapper(element) ::= <<<\\>
<proc(name=funcConstructManyPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcConstructManyInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

initiateWrapper(element) ::= <<<\\>
<proc(name=funcInitiatePublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcInitiateInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

deployWrapper(element) ::= <<<\\>
<proc(name=funcDeployPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcDeployInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

declareIdentifier(element) ::= "variable identifier <identifierToAttribute(element.identifier)>"
declareType(element) ::= "variable type <identifierToType(element.identifier)>"

declareMembers(element) ::= <<<\\>
variable members
array set members "
    <element.allMembers:declareMember(); separator="\n">
"
>>

declareMember(member) ::= <<<member.identifier> \"[dict create <\\>
support <member.support.label> <\\>
tag <member.tag> <\\>
type <identifierToType(member.type)> <\\>
tcl <identifierToTCL(member.type)> <\\>
optional <member.optional> <\\>
const <member.const> <\\>
multiple <member.multiple> <\\>
]\">>

namespace(name, block) ::= <<
namespace eval <name> {
    <block>
}
>>

identifierToType(identifier) ::= "<identifier.fullyQualified; separator={.}>"
identifierToAttribute(identifier) ::= "<identifier.lowercase>"
identifierToTCL(identifier) ::= "<identifier.fullyQualified; separator={::}>"

proc(name, args, body, public) ::= <<
<if(public)>namespace export <name><endif>
proc <name> { <args> } {
    <body>
}
>>

funcBindInput() ::= "bind-input"
funcBindOutput() ::= "bind-output"

funcBindToPublic() ::= "bind"
funcBindToInternal() ::= "_bind"

funcSetPublic() ::= "set"
funcSetInternal() ::= "_set"

funcApplyPublic() ::= "apply"
funcApplyInternal() ::= "_apply"

funcAddToPublic() ::= "add"
funcAddToInternal() ::= "_add"

funcRemovePublic() ::= "remove"
funcRemoveInternal() ::= "_remove"

funcConstructSoloPublic() ::= "construct"
funcConstructSoloInternal() ::= "_construct"

funcConstructManyPublic() ::= "construct-set"
funcConstructManyInternal() ::= "_construct_set"

funcInitiatePublic() ::= "initiate"
funcInitiateInternal() ::= "_initiate"

funcDeployPublic() ::= "deploy"
funcDeployInternal() ::= "_deploy"

commonNamespace() ::= "Glide"

ngsDeclareType(element) ::= "::NGS_DeclareType <identifierToType(element.identifier)> {}"

