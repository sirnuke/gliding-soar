/*
 * Generic AST->Text templates
 */

bindWrapper(element) ::= <<<\\>
<proc(name=funcBindToPublic(), args="args", public=true, body={<\\>
upvar binding binding
::<commonNamespace()>::<funcBindToInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

modifyWrapper(element) ::= <<<\\>
<proc(name=funcModifyPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcModifyInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

constructWrapper(element) ::= <<<\\>
<proc(name=funcConstructPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcConstructInternal()> "<identifierToTCL(element.identifier)>" $::NGS_REPLACE_IF_EXISTS $args
})>
>>

constructSetWrapper(element) ::= <<<\\>
<proc(name=funcConstructSetPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcConstructInternal()> "<identifierToTCL(element.identifier)>" $::NGS_ADD_TO_SET $args
})>
>>

deployWrapper(element) ::= <<<\\>
<proc(name=funcDeployPublic(), args="args", public=true, body={<\\>
::<commonNamespace()>::<funcDeployInternal()> "<identifierToTCL(element.identifier)>" $args
})>
>>

declareIdentifier(element) ::= "variable identifier <identifierToAttribute(element.identifier)>"
declareType(element) ::= "variable type <identifierToType(element.identifier)>"

declareMembers(element) ::= <<<\\>
array set members "
    <element.allMembers:declareMember(); separator="\n">
"
>>

declareMember(member) ::= <<<member.identifier> { <\\>
support <member.support.label> <\\>
tag <member.tag> <\\>
type <identifierToType(member.type)> <\\>
tcl <identifierToTCL(member.type)> <\\>
optional <member.optional> <\\>
const <member.const> <\\>
multiple <member.multiple> <\\>
}>>

namespace(name, block) ::= <<
namespace eval <name> {
    <block>
}
>>

identifierToType(identifier) ::= "<identifier.fullyQualified; separator={.}>"
identifierToAttribute(identifier) ::= "<identifier.lowercase>"
identifierToTCL(identifier) ::= "<identifier.fullyQualified; separator={::}>"

proc(name, args, body, public) ::= <<
<if(public)>namespace export <name><endif>
proc <name> { <args> } {
    <body>
}
>>

funcBindToPublic() ::= "bind"
funcBindToInternal() ::= "_bind"

funcModifyPublic() ::= "modify"
funcModifyInternal() ::= "_modify"

funcConstructPublic() ::= "construct"
funcConstructInternal() ::= "_construct"
funcConstructSetPublic() ::= "construct-set"

funcDeployPublic() ::= "deploy"
funcDeployInternal() ::= "_deploy"

commonNamespace() ::= "Glide"

ngsDeclareType(element) ::= "::NGS_DeclareType <identifierToType(element.identifier)> {}"

