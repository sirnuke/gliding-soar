bundle(model, root, arguments, version, when) ::= <<
# Glide v<version>
# Generated on <when>
#
<if(arguments)># Arguments: <arguments; separator=" "><endif>
#
# Autogenerated code, do not modify

<root.children:childNamespace()>
<root.elements:element()>
>>


childNamespace(ns) ::= <<
<namespace(ns.name, {
<ns.children:childNamespace()>
<ns.elements:element()>
})>
>>

element(e) ::= <<
<if(e.tangible)>
namespace eval <e.identifier.value> {
    <body(e)>
}
<endif>
>>

body(e) ::= <<
<if(e.constructable)>
<constructors(e)>
<endif>
# TODO: Stub body(e: Element)
>>

constructors(element) ::= <<
<proc(
    name="create",
    public=true,
    args=iConstructorArguments(element),
    body=iConstructorBody(element.body)
)>

<proc(
    name="create-by-operator",
    public=true,
    args=oConstructorArguments(element),
    body=oConstructorBody(element.body)
)>
>>

iConstructorArguments(element) ::= <<
<procArguments(
    required=[
    ""
    ],
    optional=[
    ]
)>
>>

oConstructorArguments(element) ::= <<
<procArguments(
    required=[
    ],
    optional=[
    ]
)>
>>

/*
constructorArguments(body, requiredDestination, attribute, binding) ::= <<
<if(requiredDestination)>destination <endif><\\>
<body.requiredParameters:{ param |<requiredProcArgument(param.identifier)>}; separator=" "> <\\>
<body.optionalParameters:{ param |<optionalProcArgument(param.identifier)>}; separator=" "> <\\>
<if(!requiredDestination)>{ destination "" } <endif><\\>
{ attribute "|<attribute>|" } <\\>
{ binding <binding> }
>>
*/

iConstructorBody(body) ::= <<
::glide::check rhs elaboration { }
# TODO: Stub! iConstructor(body)
>>

oConstructorBody(body) ::= <<
::glide::check rhs propose { }
# TODO: Stub! oConstructorBody(body)
>>


/*
 * Pure generic Soar templates
 */

binding(identifier) ::= "\<<identifier>>"

/*
 * Pure generic TCL templates
 */

procArguments(required, optional) ::= <<
<required:{ identifier |<identifier.lowercase>}; separator=" "><\\>
<if(required&&optional)> <endif><\\>
<optional:{ identifier |{ <identifier.lowercase> ""}; separator=" ">
>>


proc(name, args, body, public) ::= <<
<if(public)><export(name)><endif>
proc <name> { <args> } {
    <body>
}
>>

namespace(name, block) ::= <<
namespace eval <name> {
    <block>
}
>>

export(name) ::= "namespace export <name>"
